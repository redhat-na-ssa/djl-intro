quarkus.config.locations=/deployments/config

quarkus.swagger-ui.always-include=true
quarkus.http.cors=true

################     Logging
quarkus.log.level=INFO
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=false

quarkus.log.category."ai.djl".level=DEBUG
quarkus.log.category."com.example".level=DEBUG


################        native
quarkus.native.enable-jni=true
# quarkus.ssl.native=false

quarkus.native.additional-build-args=--verbose,--enable-https,\
    -H:+TraceClassInitialization,\
    --report-unsupported-elements-at-runtime,\
    --initialize-at-run-time=io.netty.internal.tcnative.SSL,\
    --initialize-at-run-time=ai.djl\\,org.bytedeco\\,org.tensorflow\\,com.google.protobuf



########## Kubernetes / Helm

# io.quarkus:quarkus-openshift plugin defaults to S2I to build images
# So as to avoid the need for a running OCP environment to build container images, over-ride this behavior by specifying use of docker/podman to build images
quarkus.container-image.builder=docker

quarkus.container-image.registry: quay.io
quarkus.container-image.group: redhat_naps_da

quarkus.kubernetes.deployment-target=openshift
quarkus.openshift.env.vars.JAVA_OPTIONS: -Dvertx.metrics.options.enabled=true -Dvertx.metrics.options.registryName=prometheus
quarkus.openshift.resources.limits.cpu: 2g
quarkus.openshift.resources.limits.memory: 2Gi
quarkus.openshift.resources.requests.cpu: 500m
quarkus.openshift.resources.requests.memory: 512Mi
quarkus.openshift.mounts.config.path: /deployments/config
quarkus.openshift.config-map-volumes.config.config-map-name: backend-oidc
quarkus.openshift.config-map-volumes.config.default-mode: 420
quarkus.openshift.config-map-volumes.config.items."application.properties".path: application.properties
quarkus.openshift.ports.http.host-port: 8080

quarkus.openshift.route.expose: true

quarkus.helm.enabled: true
quarkus.helm.create-tar-file: true

