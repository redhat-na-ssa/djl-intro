quarkus.config.locations=/deployments/config

quarkus.swagger-ui.always-include=true
quarkus.http.cors=true
quarkus.http.cors.origins=*

################     Logging
quarkus.log.level=INFO
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=false

quarkus.log.category."ai.djl".level=DEBUG
quarkus.log.category."com.example".level=DEBUG

########## Kubernetes / Helm

# io.quarkus:quarkus-openshift plugin defaults to S2I to build images
# So as to avoid the need for a running OCP environment to build container images, over-ride this behavior by specifying use of docker/podman to build images
quarkus.container-image.builder=docker

quarkus.container-image.registry: quay.io
quarkus.container-image.group: redhat_naps_da

quarkus.kubernetes.deployment-target=openshift
quarkus.openshift.env.vars.JAVA_OPTIONS: -Dvertx.metrics.options.enabled=true -Dvertx.metrics.options.registryName=prometheus
quarkus.kubernetes.replicas: 1
quarkus.openshift.resources.limits.cpu: 500m
quarkus.openshift.resources.limits.memory: 512Mi
quarkus.openshift.resources.requests.cpu: 100m
quarkus.openshift.resources.requests.memory: 256Mi
quarkus.openshift.mounts.models.path: /mnt/model
quarkus.openshift.pvc-volumes.models.claim-name: djl-modelmanager
quarkus.openshift.pvc-volumes.models.default-mode: 775
quarkus.openshift.ports.http.host-port: 8080

quarkus.helm.enabled: true
quarkus.helm.create-tar-file: true
